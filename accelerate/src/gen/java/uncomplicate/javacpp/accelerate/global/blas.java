// Targeted by JavaCPP version 1.5.12-SNAPSHOT: DO NOT EDIT THIS FILE

package uncomplicate.javacpp.accelerate.global;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

public class blas extends uncomplicate.javacpp.accelerate.presets.blas {
    static { Loader.load(); }

// Parsed from cblas.h

/* cblas.h
 *
 * This header defines C bindings for the Basic Linear Algebra Subprograms,
 * providing optimized basic operations on vectors and matrices.  Single-
 * and double-precision, real and complex data formats are supported by this
 * library.
 *
 * A note on complex data layouts:
 *
 * In order to allow straightforward interoperation with other libraries and
 * complex types in C and C++, complex data in BLAS is passed through an opaque
 * pointer (void *).  The layout requirements on this complex data are that
 * the real and imaginary parts are stored consecutively in memory, and have
 * the alignment of the corresponding real type (float or double).  The BLAS
 * complex interfaces are compatible with the following types:
 *
 *     - The C complex types, defined in <complex.h>.
 *     - The C++ std::complex types, defined in <complex>.
 *     - The LAPACK complex types, defined in <Accelerate/vecLib/clapack.h>.
 *     - The vDSP types DSPComplex and DSPDoubleComplex, defined in <Accelerate/vecLib/vDSP.h>.
 *     - An array of size two of the corresponding real type.
 *     - A structure containing two elements, each of the corresponding real type.
 *
 */

// #ifndef CBLAS_H

// #ifdef __cplusplus
// #endif
  
// #ifndef CBLAS_ENUM_DEFINED_H
// #define CBLAS_ENUM_DEFINED_H
  /** enum CBLAS_ORDER */
  public static final int CblasRowMajor = 101, CblasColMajor = 102;
  /** enum CBLAS_TRANSPOSE */
  public static final int CblasNoTrans = 111, CblasTrans = 112, CblasConjTrans = 113,
    AtlasConj = 114;
  /** enum CBLAS_UPLO */
  public static final int CblasUpper = 121, CblasLower = 122;
  /** enum CBLAS_DIAG */
  public static final int CblasNonUnit = 131, CblasUnit = 132;
  /** enum CBLAS_SIDE */
  public static final int CblasLeft = 141, CblasRight = 142;
// #endif  /* CBLAS_ENUM_DEFINED_H */
  
// #ifndef CBLAS_ENUM_ONLY
// #define CBLAS_H
// #define CBLAS_INDEX int
  
// #include <stdint.h>
// #if __has_include(<os/availability.h>)
// # include <os/availability.h>
// #else // __has_include(<os/availability.h>)
// # undef API_AVAILABLE
// # define API_AVAILABLE(...) /* Nothing */
// # undef API_DEPRECATED
// # define API_DEPRECATED(...) /* Nothing */
// #endif // __has_include(<os/availability.h>)
  
public static native int cblas_errprn(int __ierr, int __info, @Cast("char*") BytePointer __form);
public static native int cblas_errprn(int __ierr, int __info, @Cast("char*") ByteBuffer __form);
public static native int cblas_errprn(int __ierr, int __info, @Cast("char*") byte[] __form);
public static native void cblas_xerbla(int __p, @Cast("char*") BytePointer __rout, @Cast("char*") BytePointer __form);
public static native void cblas_xerbla(int __p, @Cast("char*") ByteBuffer __rout, @Cast("char*") ByteBuffer __form);
public static native void cblas_xerbla(int __p, @Cast("char*") byte[] __rout, @Cast("char*") byte[] __form);

/*
 * ===========================================================================
 * Prototypes for level 1 BLAS functions (complex are recast as routines)
 * ===========================================================================
 */
public static native float cblas_sdsdot(int __N, float __alpha, @Const FloatPointer __X,
                    int __incX, @Const FloatPointer __Y, int __incY);
public static native float cblas_sdsdot(int __N, float __alpha, @Const FloatBuffer __X,
                    int __incX, @Const FloatBuffer __Y, int __incY);
public static native float cblas_sdsdot(int __N, float __alpha, @Const float[] __X,
                    int __incX, @Const float[] __Y, int __incY);

public static native double cblas_dsdot(int __N, @Const FloatPointer __X, int __incX,
                   @Const FloatPointer __Y, int __incY);
public static native double cblas_dsdot(int __N, @Const FloatBuffer __X, int __incX,
                   @Const FloatBuffer __Y, int __incY);
public static native double cblas_dsdot(int __N, @Const float[] __X, int __incX,
                   @Const float[] __Y, int __incY);
public static native float cblas_sdot(int __N, @Const FloatPointer __X, int __incX,
                  @Const FloatPointer __Y, int __incY);
public static native float cblas_sdot(int __N, @Const FloatBuffer __X, int __incX,
                  @Const FloatBuffer __Y, int __incY);
public static native float cblas_sdot(int __N, @Const float[] __X, int __incX,
                  @Const float[] __Y, int __incY);
public static native double cblas_ddot(int __N, @Const DoublePointer __X, int __incX,
                  @Const DoublePointer __Y, int __incY);
public static native double cblas_ddot(int __N, @Const DoubleBuffer __X, int __incX,
                  @Const DoubleBuffer __Y, int __incY);
public static native double cblas_ddot(int __N, @Const double[] __X, int __incX,
                  @Const double[] __Y, int __incY);
/*
 * Functions having prefixes Z and C only
 */
public static native void cblas_cdotu_sub(int __N, @Const Pointer __X, int __incX,
                       @Const Pointer __Y, int __incY, Pointer __dotu);
public static native void cblas_cdotc_sub(int __N, @Const Pointer __X, int __incX,
                       @Const Pointer __Y, int __incY, Pointer __dotc);

public static native void cblas_zdotu_sub(int __N, @Const Pointer __X, int __incX,
                       @Const Pointer __Y, int __incY, Pointer __dotu);
public static native void cblas_zdotc_sub(int __N, @Const Pointer __X, int __incX,
                       @Const Pointer __Y, int __incY, Pointer __dotc);


/*
 * Functions having prefixes S D SC DZ
 */
public static native float cblas_snrm2(int __N, @Const FloatPointer __X, int __incX);
public static native float cblas_snrm2(int __N, @Const FloatBuffer __X, int __incX);
public static native float cblas_snrm2(int __N, @Const float[] __X, int __incX);
public static native float cblas_sasum(int __N, @Const FloatPointer __X, int __incX);
public static native float cblas_sasum(int __N, @Const FloatBuffer __X, int __incX);
public static native float cblas_sasum(int __N, @Const float[] __X, int __incX);

public static native double cblas_dnrm2(int __N, @Const DoublePointer __X, int __incX);
public static native double cblas_dnrm2(int __N, @Const DoubleBuffer __X, int __incX);
public static native double cblas_dnrm2(int __N, @Const double[] __X, int __incX);
public static native double cblas_dasum(int __N, @Const DoublePointer __X, int __incX);
public static native double cblas_dasum(int __N, @Const DoubleBuffer __X, int __incX);
public static native double cblas_dasum(int __N, @Const double[] __X, int __incX);

public static native float cblas_scnrm2(int __N, @Const Pointer __X, int __incX);
public static native float cblas_scasum(int __N, @Const Pointer __X, int __incX);

public static native double cblas_dznrm2(int __N, @Const Pointer __X, int __incX);
public static native double cblas_dzasum(int __N, @Const Pointer __X, int __incX);


/*
 * Functions having standard 4 prefixes (S D C Z)
 */
public static native int cblas_isamax(int __N, @Const FloatPointer __X, int __incX);
public static native int cblas_isamax(int __N, @Const FloatBuffer __X, int __incX);
public static native int cblas_isamax(int __N, @Const float[] __X, int __incX);
public static native int cblas_idamax(int __N, @Const DoublePointer __X, int __incX);
public static native int cblas_idamax(int __N, @Const DoubleBuffer __X, int __incX);
public static native int cblas_idamax(int __N, @Const double[] __X, int __incX);
public static native int cblas_icamax(int __N, @Const Pointer __X, int __incX);
public static native int cblas_izamax(int __N, @Const Pointer __X, int __incX);

/*
 * ===========================================================================
 * Prototypes for level 1 BLAS routines
 * ===========================================================================
 */

/*
 * Routines with standard 4 prefixes (s, d, c, z)
 */
public static native void cblas_sswap(int __N, FloatPointer __X, int __incX, FloatPointer __Y,
                 int __incY);
public static native void cblas_sswap(int __N, FloatBuffer __X, int __incX, FloatBuffer __Y,
                 int __incY);
public static native void cblas_sswap(int __N, float[] __X, int __incX, float[] __Y,
                 int __incY);
public static native void cblas_scopy(int __N, @Const FloatPointer __X, int __incX, FloatPointer __Y,
                 int __incY);
public static native void cblas_scopy(int __N, @Const FloatBuffer __X, int __incX, FloatBuffer __Y,
                 int __incY);
public static native void cblas_scopy(int __N, @Const float[] __X, int __incX, float[] __Y,
                 int __incY);
public static native void cblas_saxpy(int __N, float __alpha, @Const FloatPointer __X,
                 int __incX, FloatPointer __Y, int __incY);
public static native void cblas_saxpy(int __N, float __alpha, @Const FloatBuffer __X,
                 int __incX, FloatBuffer __Y, int __incY);
public static native void cblas_saxpy(int __N, float __alpha, @Const float[] __X,
                 int __incX, float[] __Y, int __incY);
public static native void catlas_saxpby(int __N, float __alpha, @Const FloatPointer __X,
                   int __incX, float __beta, FloatPointer __Y, int __incY);
public static native void catlas_saxpby(int __N, float __alpha, @Const FloatBuffer __X,
                   int __incX, float __beta, FloatBuffer __Y, int __incY);
public static native void catlas_saxpby(int __N, float __alpha, @Const float[] __X,
                   int __incX, float __beta, float[] __Y, int __incY);
public static native void catlas_sset(int __N, float __alpha, FloatPointer __X,
                 int __incX);
public static native void catlas_sset(int __N, float __alpha, FloatBuffer __X,
                 int __incX);
public static native void catlas_sset(int __N, float __alpha, float[] __X,
                 int __incX);

public static native void cblas_dswap(int __N, DoublePointer __X, int __incX, DoublePointer __Y,
                 int __incY);
public static native void cblas_dswap(int __N, DoubleBuffer __X, int __incX, DoubleBuffer __Y,
                 int __incY);
public static native void cblas_dswap(int __N, double[] __X, int __incX, double[] __Y,
                 int __incY);
public static native void cblas_dcopy(int __N, @Const DoublePointer __X, int __incX,
                 DoublePointer __Y, int __incY);
public static native void cblas_dcopy(int __N, @Const DoubleBuffer __X, int __incX,
                 DoubleBuffer __Y, int __incY);
public static native void cblas_dcopy(int __N, @Const double[] __X, int __incX,
                 double[] __Y, int __incY);
public static native void cblas_daxpy(int __N, double __alpha, @Const DoublePointer __X,
                 int __incX, DoublePointer __Y, int __incY);
public static native void cblas_daxpy(int __N, double __alpha, @Const DoubleBuffer __X,
                 int __incX, DoubleBuffer __Y, int __incY);
public static native void cblas_daxpy(int __N, double __alpha, @Const double[] __X,
                 int __incX, double[] __Y, int __incY);
public static native void catlas_daxpby(int __N, double __alpha, @Const DoublePointer __X,
                   int __incX, double __beta, DoublePointer __Y, int __incY);
public static native void catlas_daxpby(int __N, double __alpha, @Const DoubleBuffer __X,
                   int __incX, double __beta, DoubleBuffer __Y, int __incY);
public static native void catlas_daxpby(int __N, double __alpha, @Const double[] __X,
                   int __incX, double __beta, double[] __Y, int __incY);
public static native void catlas_dset(int __N, double __alpha, DoublePointer __X,
                 int __incX);
public static native void catlas_dset(int __N, double __alpha, DoubleBuffer __X,
                 int __incX);
public static native void catlas_dset(int __N, double __alpha, double[] __X,
                 int __incX);

public static native void cblas_cswap(int __N, Pointer __X, int __incX, Pointer __Y,
                 int __incY);
public static native void cblas_ccopy(int __N, @Const Pointer __X, int __incX, Pointer __Y,
                 int __incY);
public static native void cblas_caxpy(int __N, @Const Pointer __alpha, @Const Pointer __X,
                 int __incX, Pointer __Y, int __incY);
public static native void catlas_caxpby(int __N, @Const Pointer __alpha, @Const Pointer __X,
                   int __incX, @Const Pointer __beta, Pointer __Y, int __incY);
public static native void catlas_cset(int __N, @Const Pointer __alpha, Pointer __X,
                 int __incX);

public static native void cblas_zswap(int __N, Pointer __X, int __incX, Pointer __Y,
                 int __incY);
public static native void cblas_zcopy(int __N, @Const Pointer __X, int __incX, Pointer __Y,
                 int __incY);
public static native void cblas_zaxpy(int __N, @Const Pointer __alpha, @Const Pointer __X,
                 int __incX, Pointer __Y, int __incY);
public static native void catlas_zaxpby(int __N, @Const Pointer __alpha, @Const Pointer __X,
                   int __incX, @Const Pointer __beta, Pointer __Y, int __incY);
public static native void catlas_zset(int __N, @Const Pointer __alpha, Pointer __X,
                 int __incX);


/*
 * Routines with S and D prefix only
 */
public static native void cblas_srotg(FloatPointer __a, FloatPointer __b, FloatPointer __c, FloatPointer __s);
public static native void cblas_srotg(FloatBuffer __a, FloatBuffer __b, FloatBuffer __c, FloatBuffer __s);
public static native void cblas_srotg(float[] __a, float[] __b, float[] __c, float[] __s);

public static native void cblas_srot(int __N, FloatPointer __X, int __incX, FloatPointer __Y,
                int __incY, float __c, float __s);
public static native void cblas_srot(int __N, FloatBuffer __X, int __incX, FloatBuffer __Y,
                int __incY, float __c, float __s);
public static native void cblas_srot(int __N, float[] __X, int __incX, float[] __Y,
                int __incY, float __c, float __s);
public static native void cblas_srotm(int __N, FloatPointer __X, int __incX, FloatPointer __Y,
                 int __incY, @Const FloatPointer __P);
public static native void cblas_srotm(int __N, FloatBuffer __X, int __incX, FloatBuffer __Y,
                 int __incY, @Const FloatBuffer __P);
public static native void cblas_srotm(int __N, float[] __X, int __incX, float[] __Y,
                 int __incY, @Const float[] __P);

public static native void cblas_drotg(DoublePointer __a, DoublePointer __b, DoublePointer __c, DoublePointer __s);
public static native void cblas_drotg(DoubleBuffer __a, DoubleBuffer __b, DoubleBuffer __c, DoubleBuffer __s);
public static native void cblas_drotg(double[] __a, double[] __b, double[] __c, double[] __s);

public static native void cblas_drot(int __N, DoublePointer __X, int __incX, DoublePointer __Y,
                int __incY, double __c, double __s);
public static native void cblas_drot(int __N, DoubleBuffer __X, int __incX, DoubleBuffer __Y,
                int __incY, double __c, double __s);
public static native void cblas_drot(int __N, double[] __X, int __incX, double[] __Y,
                int __incY, double __c, double __s);
public static native void cblas_drotm(int __N, DoublePointer __X, int __incX, DoublePointer __Y,
                 int __incY, @Const DoublePointer __P);
public static native void cblas_drotm(int __N, DoubleBuffer __X, int __incX, DoubleBuffer __Y,
                 int __incY, @Const DoubleBuffer __P);
public static native void cblas_drotm(int __N, double[] __X, int __incX, double[] __Y,
                 int __incY, @Const double[] __P);


/*
 * Routines with S D C Z CS and ZD prefixes
 */
public static native void cblas_sscal(int __N, float __alpha, FloatPointer __X,
                 int __incX);
public static native void cblas_sscal(int __N, float __alpha, FloatBuffer __X,
                 int __incX);
public static native void cblas_sscal(int __N, float __alpha, float[] __X,
                 int __incX);
public static native void cblas_dscal(int __N, double __alpha, DoublePointer __X,
                 int __incX);
public static native void cblas_dscal(int __N, double __alpha, DoubleBuffer __X,
                 int __incX);
public static native void cblas_dscal(int __N, double __alpha, double[] __X,
                 int __incX);
public static native void cblas_cscal(int __N, @Const Pointer __alpha, Pointer __X,
                 int __incX);
public static native void cblas_zscal(int __N, @Const Pointer __alpha, Pointer __X,
                 int __incX);
public static native void cblas_csscal(int __N, float __alpha, Pointer __X,
                  int __incX);
public static native void cblas_zdscal(int __N, double __alpha, Pointer __X,
                  int __incX);

/*
 * Extra reference routines provided by ATLAS, but not mandated by the standard
 */
public static native void cblas_crotg(Pointer __a, Pointer __b, Pointer __c, Pointer __s);
public static native void cblas_zrotg(Pointer __a, Pointer __b, Pointer __c, Pointer __s);
public static native void cblas_csrot(int __N, Pointer __X, int __incX, Pointer __Y,
                 int __incY, float __c, float __s);
public static native void cblas_zdrot(int __N, Pointer __X, int __incX, Pointer __Y,
                 int __incY, double __c, double __s);

/*
 * ===========================================================================
 * Prototypes for level 2 BLAS
 * ===========================================================================
 */

/*
 * Routines with standard 4 prefixes (S, D, C, Z)
 */
public static native void cblas_sgemv(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, int __M, int __N,
                 float __alpha, @Const FloatPointer __A, int __lda,
                 @Const FloatPointer __X, int __incX, float __beta, FloatPointer __Y,
                 int __incY);
public static native void cblas_sgemv(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, int __M, int __N,
                 float __alpha, @Const FloatBuffer __A, int __lda,
                 @Const FloatBuffer __X, int __incX, float __beta, FloatBuffer __Y,
                 int __incY);
public static native void cblas_sgemv(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, int __M, int __N,
                 float __alpha, @Const float[] __A, int __lda,
                 @Const float[] __X, int __incX, float __beta, float[] __Y,
                 int __incY);
public static native void cblas_sgbmv(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, int __M, int __N,
                 int __KL, int __KU, float __alpha, @Const FloatPointer __A,
                 int __lda, @Const FloatPointer __X, int __incX,
                 float __beta, FloatPointer __Y, int __incY);
public static native void cblas_sgbmv(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, int __M, int __N,
                 int __KL, int __KU, float __alpha, @Const FloatBuffer __A,
                 int __lda, @Const FloatBuffer __X, int __incX,
                 float __beta, FloatBuffer __Y, int __incY);
public static native void cblas_sgbmv(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, int __M, int __N,
                 int __KL, int __KU, float __alpha, @Const float[] __A,
                 int __lda, @Const float[] __X, int __incX,
                 float __beta, float[] __Y, int __incY);
public static native void cblas_strmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const FloatPointer __A, int __lda, FloatPointer __X,
                 int __incX);
public static native void cblas_strmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const FloatBuffer __A, int __lda, FloatBuffer __X,
                 int __incX);
public static native void cblas_strmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const float[] __A, int __lda, float[] __X,
                 int __incX);
public static native void cblas_stbmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, int __K, @Const FloatPointer __A, int __lda,
                 FloatPointer __X, int __incX);
public static native void cblas_stbmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, int __K, @Const FloatBuffer __A, int __lda,
                 FloatBuffer __X, int __incX);
public static native void cblas_stbmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, int __K, @Const float[] __A, int __lda,
                 float[] __X, int __incX);
public static native void cblas_stpmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const FloatPointer __Ap, FloatPointer __X, int __incX);
public static native void cblas_stpmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const FloatBuffer __Ap, FloatBuffer __X, int __incX);
public static native void cblas_stpmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const float[] __Ap, float[] __X, int __incX);
public static native void cblas_strsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const FloatPointer __A, int __lda, FloatPointer __X,
                 int __incX);
public static native void cblas_strsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const FloatBuffer __A, int __lda, FloatBuffer __X,
                 int __incX);
public static native void cblas_strsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const float[] __A, int __lda, float[] __X,
                 int __incX);
public static native void cblas_stbsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, int __K, @Const FloatPointer __A, int __lda,
                 FloatPointer __X, int __incX);
public static native void cblas_stbsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, int __K, @Const FloatBuffer __A, int __lda,
                 FloatBuffer __X, int __incX);
public static native void cblas_stbsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, int __K, @Const float[] __A, int __lda,
                 float[] __X, int __incX);
public static native void cblas_stpsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const FloatPointer __Ap, FloatPointer __X, int __incX);
public static native void cblas_stpsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const FloatBuffer __Ap, FloatBuffer __X, int __incX);
public static native void cblas_stpsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const float[] __Ap, float[] __X, int __incX);

public static native void cblas_dgemv(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, int __M, int __N,
                 double __alpha, @Const DoublePointer __A, int __lda,
                 @Const DoublePointer __X, int __incX, double __beta, DoublePointer __Y,
                 int __incY);
public static native void cblas_dgemv(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, int __M, int __N,
                 double __alpha, @Const DoubleBuffer __A, int __lda,
                 @Const DoubleBuffer __X, int __incX, double __beta, DoubleBuffer __Y,
                 int __incY);
public static native void cblas_dgemv(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, int __M, int __N,
                 double __alpha, @Const double[] __A, int __lda,
                 @Const double[] __X, int __incX, double __beta, double[] __Y,
                 int __incY);
public static native void cblas_dgbmv(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, int __M, int __N,
                 int __KL, int __KU, double __alpha,
                 @Const DoublePointer __A, int __lda, @Const DoublePointer __X,
                 int __incX, double __beta, DoublePointer __Y, int __incY);
public static native void cblas_dgbmv(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, int __M, int __N,
                 int __KL, int __KU, double __alpha,
                 @Const DoubleBuffer __A, int __lda, @Const DoubleBuffer __X,
                 int __incX, double __beta, DoubleBuffer __Y, int __incY);
public static native void cblas_dgbmv(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, int __M, int __N,
                 int __KL, int __KU, double __alpha,
                 @Const double[] __A, int __lda, @Const double[] __X,
                 int __incX, double __beta, double[] __Y, int __incY);
public static native void cblas_dtrmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const DoublePointer __A, int __lda, DoublePointer __X,
                 int __incX);
public static native void cblas_dtrmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const DoubleBuffer __A, int __lda, DoubleBuffer __X,
                 int __incX);
public static native void cblas_dtrmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const double[] __A, int __lda, double[] __X,
                 int __incX);
public static native void cblas_dtbmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, int __K, @Const DoublePointer __A, int __lda,
                 DoublePointer __X, int __incX);
public static native void cblas_dtbmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, int __K, @Const DoubleBuffer __A, int __lda,
                 DoubleBuffer __X, int __incX);
public static native void cblas_dtbmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, int __K, @Const double[] __A, int __lda,
                 double[] __X, int __incX);
public static native void cblas_dtpmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const DoublePointer __Ap, DoublePointer __X, int __incX);
public static native void cblas_dtpmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const DoubleBuffer __Ap, DoubleBuffer __X, int __incX);
public static native void cblas_dtpmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const double[] __Ap, double[] __X, int __incX);
public static native void cblas_dtrsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const DoublePointer __A, int __lda, DoublePointer __X,
                 int __incX);
public static native void cblas_dtrsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const DoubleBuffer __A, int __lda, DoubleBuffer __X,
                 int __incX);
public static native void cblas_dtrsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const double[] __A, int __lda, double[] __X,
                 int __incX);
public static native void cblas_dtbsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, int __K, @Const DoublePointer __A, int __lda,
                 DoublePointer __X, int __incX);
public static native void cblas_dtbsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, int __K, @Const DoubleBuffer __A, int __lda,
                 DoubleBuffer __X, int __incX);
public static native void cblas_dtbsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, int __K, @Const double[] __A, int __lda,
                 double[] __X, int __incX);
public static native void cblas_dtpsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const DoublePointer __Ap, DoublePointer __X, int __incX);
public static native void cblas_dtpsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const DoubleBuffer __Ap, DoubleBuffer __X, int __incX);
public static native void cblas_dtpsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const double[] __Ap, double[] __X, int __incX);

public static native void cblas_cgemv(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, int __M, int __N,
                 @Const Pointer __alpha, @Const Pointer __A, int __lda, @Const Pointer __X,
                 int __incX, @Const Pointer __beta, Pointer __Y, int __incY);
public static native void cblas_cgbmv(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, int __M, int __N,
                 int __KL, int __KU, @Const Pointer __alpha, @Const Pointer __A,
                 int __lda, @Const Pointer __X, int __incX, @Const Pointer __beta,
                 Pointer __Y, int __incY);
public static native void cblas_ctrmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const Pointer __A, int __lda, Pointer __X,
                 int __incX);
public static native void cblas_ctbmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, int __K, @Const Pointer __A, int __lda,
                 Pointer __X, int __incX);
public static native void cblas_ctpmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const Pointer __Ap, Pointer __X, int __incX);
public static native void cblas_ctrsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const Pointer __A, int __lda, Pointer __X,
                 int __incX);
public static native void cblas_ctbsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, int __K, @Const Pointer __A, int __lda,
                 Pointer __X, int __incX);
public static native void cblas_ctpsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const Pointer __Ap, Pointer __X, int __incX);

public static native void cblas_zgemv(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, int __M, int __N,
                 @Const Pointer __alpha, @Const Pointer __A, int __lda, @Const Pointer __X,
                 int __incX, @Const Pointer __beta, Pointer __Y, int __incY);
public static native void cblas_zgbmv(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, int __M, int __N,
                 int __KL, int __KU, @Const Pointer __alpha, @Const Pointer __A,
                 int __lda, @Const Pointer __X, int __incX, @Const Pointer __beta,
                 Pointer __Y, int __incY);
public static native void cblas_ztrmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const Pointer __A, int __lda, Pointer __X,
                 int __incX);
public static native void cblas_ztbmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, int __K, @Const Pointer __A, int __lda,
                 Pointer __X, int __incX);
public static native void cblas_ztpmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const Pointer __Ap, Pointer __X, int __incX);
public static native void cblas_ztrsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const Pointer __A, int __lda, Pointer __X,
                 int __incX);
public static native void cblas_ztbsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, int __K, @Const Pointer __A, int __lda,
                 Pointer __X, int __incX);
public static native void cblas_ztpsv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA, @Cast("const CBLAS_DIAG") int __Diag,
                 int __N, @Const Pointer __Ap, Pointer __X, int __incX);


/*
 * Routines with S and D prefixes only
 */
public static native void cblas_ssymv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, float __alpha, @Const FloatPointer __A, int __lda,
                 @Const FloatPointer __X, int __incX, float __beta, FloatPointer __Y,
                 int __incY);
public static native void cblas_ssymv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, float __alpha, @Const FloatBuffer __A, int __lda,
                 @Const FloatBuffer __X, int __incX, float __beta, FloatBuffer __Y,
                 int __incY);
public static native void cblas_ssymv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, float __alpha, @Const float[] __A, int __lda,
                 @Const float[] __X, int __incX, float __beta, float[] __Y,
                 int __incY);
public static native void cblas_ssbmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, int __K, float __alpha, @Const FloatPointer __A,
                 int __lda, @Const FloatPointer __X, int __incX,
                 float __beta, FloatPointer __Y, int __incY);
public static native void cblas_ssbmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, int __K, float __alpha, @Const FloatBuffer __A,
                 int __lda, @Const FloatBuffer __X, int __incX,
                 float __beta, FloatBuffer __Y, int __incY);
public static native void cblas_ssbmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, int __K, float __alpha, @Const float[] __A,
                 int __lda, @Const float[] __X, int __incX,
                 float __beta, float[] __Y, int __incY);
public static native void cblas_sspmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, float __alpha, @Const FloatPointer __Ap,
                 @Const FloatPointer __X, int __incX, float __beta, FloatPointer __Y,
                 int __incY);
public static native void cblas_sspmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, float __alpha, @Const FloatBuffer __Ap,
                 @Const FloatBuffer __X, int __incX, float __beta, FloatBuffer __Y,
                 int __incY);
public static native void cblas_sspmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, float __alpha, @Const float[] __Ap,
                 @Const float[] __X, int __incX, float __beta, float[] __Y,
                 int __incY);
public static native void cblas_sger(@Cast("const CBLAS_ORDER") int __Order, int __M, int __N,
                float __alpha, @Const FloatPointer __X, int __incX,
                @Const FloatPointer __Y, int __incY, FloatPointer __A, int __lda);
public static native void cblas_sger(@Cast("const CBLAS_ORDER") int __Order, int __M, int __N,
                float __alpha, @Const FloatBuffer __X, int __incX,
                @Const FloatBuffer __Y, int __incY, FloatBuffer __A, int __lda);
public static native void cblas_sger(@Cast("const CBLAS_ORDER") int __Order, int __M, int __N,
                float __alpha, @Const float[] __X, int __incX,
                @Const float[] __Y, int __incY, float[] __A, int __lda);
public static native void cblas_ssyr(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                int __N, float __alpha, @Const FloatPointer __X, int __incX,
                FloatPointer __A, int __lda);
public static native void cblas_ssyr(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                int __N, float __alpha, @Const FloatBuffer __X, int __incX,
                FloatBuffer __A, int __lda);
public static native void cblas_ssyr(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                int __N, float __alpha, @Const float[] __X, int __incX,
                float[] __A, int __lda);
public static native void cblas_sspr(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                int __N, float __alpha, @Const FloatPointer __X, int __incX,
                FloatPointer __Ap);
public static native void cblas_sspr(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                int __N, float __alpha, @Const FloatBuffer __X, int __incX,
                FloatBuffer __Ap);
public static native void cblas_sspr(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                int __N, float __alpha, @Const float[] __X, int __incX,
                float[] __Ap);
public static native void cblas_ssyr2(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, float __alpha, @Const FloatPointer __X, int __incX,
                 @Const FloatPointer __Y, int __incY, FloatPointer __A, int __lda);
public static native void cblas_ssyr2(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, float __alpha, @Const FloatBuffer __X, int __incX,
                 @Const FloatBuffer __Y, int __incY, FloatBuffer __A, int __lda);
public static native void cblas_ssyr2(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, float __alpha, @Const float[] __X, int __incX,
                 @Const float[] __Y, int __incY, float[] __A, int __lda);
public static native void cblas_sspr2(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, float __alpha, @Const FloatPointer __X, int __incX,
                 @Const FloatPointer __Y, int __incY, FloatPointer __A);
public static native void cblas_sspr2(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, float __alpha, @Const FloatBuffer __X, int __incX,
                 @Const FloatBuffer __Y, int __incY, FloatBuffer __A);
public static native void cblas_sspr2(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, float __alpha, @Const float[] __X, int __incX,
                 @Const float[] __Y, int __incY, float[] __A);

public static native void cblas_dsymv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, double __alpha, @Const DoublePointer __A,
                 int __lda, @Const DoublePointer __X, int __incX,
                 double __beta, DoublePointer __Y, int __incY);
public static native void cblas_dsymv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, double __alpha, @Const DoubleBuffer __A,
                 int __lda, @Const DoubleBuffer __X, int __incX,
                 double __beta, DoubleBuffer __Y, int __incY);
public static native void cblas_dsymv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, double __alpha, @Const double[] __A,
                 int __lda, @Const double[] __X, int __incX,
                 double __beta, double[] __Y, int __incY);
public static native void cblas_dsbmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, int __K, double __alpha, @Const DoublePointer __A,
                 int __lda, @Const DoublePointer __X, int __incX,
                 double __beta, DoublePointer __Y, int __incY);
public static native void cblas_dsbmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, int __K, double __alpha, @Const DoubleBuffer __A,
                 int __lda, @Const DoubleBuffer __X, int __incX,
                 double __beta, DoubleBuffer __Y, int __incY);
public static native void cblas_dsbmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, int __K, double __alpha, @Const double[] __A,
                 int __lda, @Const double[] __X, int __incX,
                 double __beta, double[] __Y, int __incY);
public static native void cblas_dspmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, double __alpha, @Const DoublePointer __Ap,
                 @Const DoublePointer __X, int __incX, double __beta, DoublePointer __Y,
                 int __incY);
public static native void cblas_dspmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, double __alpha, @Const DoubleBuffer __Ap,
                 @Const DoubleBuffer __X, int __incX, double __beta, DoubleBuffer __Y,
                 int __incY);
public static native void cblas_dspmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, double __alpha, @Const double[] __Ap,
                 @Const double[] __X, int __incX, double __beta, double[] __Y,
                 int __incY);
public static native void cblas_dger(@Cast("const CBLAS_ORDER") int __Order, int __M, int __N,
                double __alpha, @Const DoublePointer __X, int __incX,
                @Const DoublePointer __Y, int __incY, DoublePointer __A, int __lda);
public static native void cblas_dger(@Cast("const CBLAS_ORDER") int __Order, int __M, int __N,
                double __alpha, @Const DoubleBuffer __X, int __incX,
                @Const DoubleBuffer __Y, int __incY, DoubleBuffer __A, int __lda);
public static native void cblas_dger(@Cast("const CBLAS_ORDER") int __Order, int __M, int __N,
                double __alpha, @Const double[] __X, int __incX,
                @Const double[] __Y, int __incY, double[] __A, int __lda);
public static native void cblas_dsyr(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                int __N, double __alpha, @Const DoublePointer __X,
                int __incX, DoublePointer __A, int __lda);
public static native void cblas_dsyr(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                int __N, double __alpha, @Const DoubleBuffer __X,
                int __incX, DoubleBuffer __A, int __lda);
public static native void cblas_dsyr(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                int __N, double __alpha, @Const double[] __X,
                int __incX, double[] __A, int __lda);
public static native void cblas_dspr(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                int __N, double __alpha, @Const DoublePointer __X,
                int __incX, DoublePointer __Ap);
public static native void cblas_dspr(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                int __N, double __alpha, @Const DoubleBuffer __X,
                int __incX, DoubleBuffer __Ap);
public static native void cblas_dspr(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                int __N, double __alpha, @Const double[] __X,
                int __incX, double[] __Ap);
public static native void cblas_dsyr2(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, double __alpha, @Const DoublePointer __X,
                 int __incX, @Const DoublePointer __Y, int __incY, DoublePointer __A,
                 int __lda);
public static native void cblas_dsyr2(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, double __alpha, @Const DoubleBuffer __X,
                 int __incX, @Const DoubleBuffer __Y, int __incY, DoubleBuffer __A,
                 int __lda);
public static native void cblas_dsyr2(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, double __alpha, @Const double[] __X,
                 int __incX, @Const double[] __Y, int __incY, double[] __A,
                 int __lda);
public static native void cblas_dspr2(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, double __alpha, @Const DoublePointer __X,
                 int __incX, @Const DoublePointer __Y, int __incY, DoublePointer __A);
public static native void cblas_dspr2(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, double __alpha, @Const DoubleBuffer __X,
                 int __incX, @Const DoubleBuffer __Y, int __incY, DoubleBuffer __A);
public static native void cblas_dspr2(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, double __alpha, @Const double[] __X,
                 int __incX, @Const double[] __Y, int __incY, double[] __A);


/*
 * Routines with C and Z prefixes only
 */
public static native void cblas_chemv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, @Const Pointer __alpha, @Const Pointer __A, int __lda,
                 @Const Pointer __X, int __incX, @Const Pointer __beta, Pointer __Y,
                 int __incY);
public static native void cblas_chbmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, int __K, @Const Pointer __alpha, @Const Pointer __A,
                 int __lda, @Const Pointer __X, int __incX, @Const Pointer __beta,
                 Pointer __Y, int __incY);
public static native void cblas_chpmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, @Const Pointer __alpha, @Const Pointer __Ap, @Const Pointer __X,
                 int __incX, @Const Pointer __beta, Pointer __Y, int __incY);
public static native void cblas_cgeru(@Cast("const CBLAS_ORDER") int __Order, int __M, int __N,
                 @Const Pointer __alpha, @Const Pointer __X, int __incX,
                 @Const Pointer __Y, int __incY, Pointer __A, int __lda);
public static native void cblas_cgerc(@Cast("const CBLAS_ORDER") int __Order, int __M, int __N,
                 @Const Pointer __alpha, @Const Pointer __X, int __incX,
                 @Const Pointer __Y, int __incY, Pointer __A, int __lda);
public static native void cblas_cher(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                int __N, float __alpha, @Const Pointer __X, int __incX,
                Pointer __A, int __lda);
public static native void cblas_chpr(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                int __N, float __alpha, @Const Pointer __X, int __incX,
                Pointer __A);
public static native void cblas_cher2(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, @Const Pointer __alpha, @Const Pointer __X, int __incX,
                 @Const Pointer __Y, int __incY, Pointer __A, int __lda);
public static native void cblas_chpr2(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, @Const Pointer __alpha, @Const Pointer __X, int __incX,
                 @Const Pointer __Y, int __incY, Pointer __Ap);

public static native void cblas_zhemv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, @Const Pointer __alpha, @Const Pointer __A, int __lda,
                 @Const Pointer __X, int __incX, @Const Pointer __beta, Pointer __Y,
                 int __incY);
public static native void cblas_zhbmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, int __K, @Const Pointer __alpha, @Const Pointer __A,
                 int __lda, @Const Pointer __X, int __incX, @Const Pointer __beta,
                 Pointer __Y, int __incY);
public static native void cblas_zhpmv(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, @Const Pointer __alpha, @Const Pointer __Ap, @Const Pointer __X,
                 int __incX, @Const Pointer __beta, Pointer __Y, int __incY);
public static native void cblas_zgeru(@Cast("const CBLAS_ORDER") int __Order, int __M, int __N,
                 @Const Pointer __alpha, @Const Pointer __X, int __incX,
                 @Const Pointer __Y, int __incY, Pointer __A, int __lda);
public static native void cblas_zgerc(@Cast("const CBLAS_ORDER") int __Order, int __M, int __N,
                 @Const Pointer __alpha, @Const Pointer __X, int __incX,
                 @Const Pointer __Y, int __incY, Pointer __A, int __lda);
public static native void cblas_zher(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                int __N, double __alpha, @Const Pointer __X, int __incX,
                Pointer __A, int __lda);
public static native void cblas_zhpr(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                int __N, double __alpha, @Const Pointer __X, int __incX,
                Pointer __A);
public static native void cblas_zher2(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, @Const Pointer __alpha, @Const Pointer __X, int __incX,
                 @Const Pointer __Y, int __incY, Pointer __A, int __lda);
public static native void cblas_zhpr2(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 int __N, @Const Pointer __alpha, @Const Pointer __X, int __incX,
                 @Const Pointer __Y, int __incY, Pointer __Ap);

/*
 * ===========================================================================
 * Prototypes for level 3 BLAS
 * ===========================================================================
 */

/*
 * Routines with standard 4 prefixes (S, D, C, Z)
 */
public static native void cblas_sgemm(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_TRANSPOSE") int __TransB, int __M, int __N,
                 int __K, float __alpha, @Const FloatPointer __A, int __lda,
                 @Const FloatPointer __B, int __ldb, float __beta, FloatPointer __C,
                 int __ldc);
public static native void cblas_sgemm(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_TRANSPOSE") int __TransB, int __M, int __N,
                 int __K, float __alpha, @Const FloatBuffer __A, int __lda,
                 @Const FloatBuffer __B, int __ldb, float __beta, FloatBuffer __C,
                 int __ldc);
public static native void cblas_sgemm(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_TRANSPOSE") int __TransB, int __M, int __N,
                 int __K, float __alpha, @Const float[] __A, int __lda,
                 @Const float[] __B, int __ldb, float __beta, float[] __C,
                 int __ldc);
public static native void cblas_ssymm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, int __M, int __N,
                 float __alpha, @Const FloatPointer __A, int __lda,
                 @Const FloatPointer __B, int __ldb, float __beta, FloatPointer __C,
                 int __ldc);
public static native void cblas_ssymm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, int __M, int __N,
                 float __alpha, @Const FloatBuffer __A, int __lda,
                 @Const FloatBuffer __B, int __ldb, float __beta, FloatBuffer __C,
                 int __ldc);
public static native void cblas_ssymm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, int __M, int __N,
                 float __alpha, @Const float[] __A, int __lda,
                 @Const float[] __B, int __ldb, float __beta, float[] __C,
                 int __ldc);
public static native void cblas_ssyrk(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __Trans, int __N, int __K,
                 float __alpha, @Const FloatPointer __A, int __lda,
                 float __beta, FloatPointer __C, int __ldc);
public static native void cblas_ssyrk(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __Trans, int __N, int __K,
                 float __alpha, @Const FloatBuffer __A, int __lda,
                 float __beta, FloatBuffer __C, int __ldc);
public static native void cblas_ssyrk(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __Trans, int __N, int __K,
                 float __alpha, @Const float[] __A, int __lda,
                 float __beta, float[] __C, int __ldc);
public static native void cblas_ssyr2k(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int __Trans, int __N, int __K,
                  float __alpha, @Const FloatPointer __A, int __lda,
                  @Const FloatPointer __B, int __ldb, float __beta, FloatPointer __C,
                  int __ldc);
public static native void cblas_ssyr2k(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int __Trans, int __N, int __K,
                  float __alpha, @Const FloatBuffer __A, int __lda,
                  @Const FloatBuffer __B, int __ldb, float __beta, FloatBuffer __C,
                  int __ldc);
public static native void cblas_ssyr2k(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int __Trans, int __N, int __K,
                  float __alpha, @Const float[] __A, int __lda,
                  @Const float[] __B, int __ldb, float __beta, float[] __C,
                  int __ldc);
public static native void cblas_strmm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_DIAG") int __Diag, int __M, int __N,
                 float __alpha, @Const FloatPointer __A, int __lda, FloatPointer __B,
                 int __ldb);
public static native void cblas_strmm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_DIAG") int __Diag, int __M, int __N,
                 float __alpha, @Const FloatBuffer __A, int __lda, FloatBuffer __B,
                 int __ldb);
public static native void cblas_strmm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_DIAG") int __Diag, int __M, int __N,
                 float __alpha, @Const float[] __A, int __lda, float[] __B,
                 int __ldb);
public static native void cblas_strsm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_DIAG") int __Diag, int __M, int __N,
                 float __alpha, @Const FloatPointer __A, int __lda, FloatPointer __B,
                 int __ldb);
public static native void cblas_strsm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_DIAG") int __Diag, int __M, int __N,
                 float __alpha, @Const FloatBuffer __A, int __lda, FloatBuffer __B,
                 int __ldb);
public static native void cblas_strsm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_DIAG") int __Diag, int __M, int __N,
                 float __alpha, @Const float[] __A, int __lda, float[] __B,
                 int __ldb);

public static native void cblas_dgemm(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_TRANSPOSE") int __TransB, int __M, int __N,
                 int __K, double __alpha, @Const DoublePointer __A,
                 int __lda, @Const DoublePointer __B, int __ldb,
                 double __beta, DoublePointer __C, int __ldc);
public static native void cblas_dgemm(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_TRANSPOSE") int __TransB, int __M, int __N,
                 int __K, double __alpha, @Const DoubleBuffer __A,
                 int __lda, @Const DoubleBuffer __B, int __ldb,
                 double __beta, DoubleBuffer __C, int __ldc);
public static native void cblas_dgemm(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_TRANSPOSE") int __TransB, int __M, int __N,
                 int __K, double __alpha, @Const double[] __A,
                 int __lda, @Const double[] __B, int __ldb,
                 double __beta, double[] __C, int __ldc);
public static native void cblas_dsymm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, int __M, int __N,
                 double __alpha, @Const DoublePointer __A, int __lda,
                 @Const DoublePointer __B, int __ldb, double __beta, DoublePointer __C,
                 int __ldc);
public static native void cblas_dsymm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, int __M, int __N,
                 double __alpha, @Const DoubleBuffer __A, int __lda,
                 @Const DoubleBuffer __B, int __ldb, double __beta, DoubleBuffer __C,
                 int __ldc);
public static native void cblas_dsymm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, int __M, int __N,
                 double __alpha, @Const double[] __A, int __lda,
                 @Const double[] __B, int __ldb, double __beta, double[] __C,
                 int __ldc);
public static native void cblas_dsyrk(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __Trans, int __N, int __K,
                 double __alpha, @Const DoublePointer __A, int __lda,
                 double __beta, DoublePointer __C, int __ldc);
public static native void cblas_dsyrk(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __Trans, int __N, int __K,
                 double __alpha, @Const DoubleBuffer __A, int __lda,
                 double __beta, DoubleBuffer __C, int __ldc);
public static native void cblas_dsyrk(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __Trans, int __N, int __K,
                 double __alpha, @Const double[] __A, int __lda,
                 double __beta, double[] __C, int __ldc);
public static native void cblas_dsyr2k(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int __Trans, int __N, int __K,
                  double __alpha, @Const DoublePointer __A, int __lda,
                  @Const DoublePointer __B, int __ldb, double __beta, DoublePointer __C,
                  int __ldc);
public static native void cblas_dsyr2k(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int __Trans, int __N, int __K,
                  double __alpha, @Const DoubleBuffer __A, int __lda,
                  @Const DoubleBuffer __B, int __ldb, double __beta, DoubleBuffer __C,
                  int __ldc);
public static native void cblas_dsyr2k(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int __Trans, int __N, int __K,
                  double __alpha, @Const double[] __A, int __lda,
                  @Const double[] __B, int __ldb, double __beta, double[] __C,
                  int __ldc);
public static native void cblas_dtrmm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_DIAG") int __Diag, int __M, int __N,
                 double __alpha, @Const DoublePointer __A, int __lda, DoublePointer __B,
                 int __ldb);
public static native void cblas_dtrmm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_DIAG") int __Diag, int __M, int __N,
                 double __alpha, @Const DoubleBuffer __A, int __lda, DoubleBuffer __B,
                 int __ldb);
public static native void cblas_dtrmm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_DIAG") int __Diag, int __M, int __N,
                 double __alpha, @Const double[] __A, int __lda, double[] __B,
                 int __ldb);
public static native void cblas_dtrsm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_DIAG") int __Diag, int __M, int __N,
                 double __alpha, @Const DoublePointer __A, int __lda, DoublePointer __B,
                 int __ldb);
public static native void cblas_dtrsm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_DIAG") int __Diag, int __M, int __N,
                 double __alpha, @Const DoubleBuffer __A, int __lda, DoubleBuffer __B,
                 int __ldb);
public static native void cblas_dtrsm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_DIAG") int __Diag, int __M, int __N,
                 double __alpha, @Const double[] __A, int __lda, double[] __B,
                 int __ldb);

public static native void cblas_cgemm(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_TRANSPOSE") int __TransB, int __M, int __N,
                 int __K, @Const Pointer __alpha, @Const Pointer __A, int __lda,
                 @Const Pointer __B, int __ldb, @Const Pointer __beta, Pointer __C,
                 int __ldc);
public static native void cblas_csymm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, int __M, int __N,
                 @Const Pointer __alpha, @Const Pointer __A, int __lda, @Const Pointer __B,
                 int __ldb, @Const Pointer __beta, Pointer __C, int __ldc);
public static native void cblas_csyrk(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __Trans, int __N, int __K,
                 @Const Pointer __alpha, @Const Pointer __A, int __lda,
                 @Const Pointer __beta, Pointer __C, int __ldc);
public static native void cblas_csyr2k(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int __Trans, int __N, int __K,
                  @Const Pointer __alpha, @Const Pointer __A, int __lda, @Const Pointer __B,
                  int __ldb, @Const Pointer __beta, Pointer __C, int __ldc);
public static native void cblas_ctrmm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_DIAG") int __Diag, int __M, int __N,
                 @Const Pointer __alpha, @Const Pointer __A, int __lda, Pointer __B,
                 int __ldb);
public static native void cblas_ctrsm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_DIAG") int __Diag, int __M, int __N,
                 @Const Pointer __alpha, @Const Pointer __A, int __lda, Pointer __B,
                 int __ldb);

public static native void cblas_zgemm(@Cast("const CBLAS_ORDER") int __Order,
                 @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_TRANSPOSE") int __TransB, int __M, int __N,
                 int __K, @Const Pointer __alpha, @Const Pointer __A, int __lda,
                 @Const Pointer __B, int __ldb, @Const Pointer __beta, Pointer __C,
                 int __ldc);
public static native void cblas_zsymm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, int __M, int __N,
                 @Const Pointer __alpha, @Const Pointer __A, int __lda, @Const Pointer __B,
                 int __ldb, @Const Pointer __beta, Pointer __C, int __ldc);
public static native void cblas_zsyrk(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __Trans, int __N, int __K,
                 @Const Pointer __alpha, @Const Pointer __A, int __lda,
                 @Const Pointer __beta, Pointer __C, int __ldc);
public static native void cblas_zsyr2k(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int __Trans, int __N, int __K,
                  @Const Pointer __alpha, @Const Pointer __A, int __lda, @Const Pointer __B,
                  int __ldb, @Const Pointer __beta, Pointer __C, int __ldc);
public static native void cblas_ztrmm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_DIAG") int __Diag, int __M, int __N,
                 @Const Pointer __alpha, @Const Pointer __A, int __lda, Pointer __B,
                 int __ldb);
public static native void cblas_ztrsm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, @Cast("const CBLAS_TRANSPOSE") int __TransA,
                 @Cast("const CBLAS_DIAG") int __Diag, int __M, int __N,
                 @Const Pointer __alpha, @Const Pointer __A, int __lda, Pointer __B,
                 int __ldb);


/*
 * Routines with prefixes C and Z only
 */
public static native void cblas_chemm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, int __M, int __N,
                 @Const Pointer __alpha, @Const Pointer __A, int __lda, @Const Pointer __B,
                 int __ldb, @Const Pointer __beta, Pointer __C, int __ldc);
public static native void cblas_cherk(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __Trans, int __N, int __K,
                 float __alpha, @Const Pointer __A, int __lda,
                 float __beta, Pointer __C, int __ldc);
public static native void cblas_cher2k(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int __Trans, int __N, int __K,
                  @Const Pointer __alpha, @Const Pointer __A, int __lda, @Const Pointer __B,
                  int __ldb, float __beta, Pointer __C, int __ldc);
public static native void cblas_zhemm(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_SIDE") int __Side,
                 @Cast("const CBLAS_UPLO") int __Uplo, int __M, int __N,
                 @Const Pointer __alpha, @Const Pointer __A, int __lda, @Const Pointer __B,
                 int __ldb, @Const Pointer __beta, Pointer __C, int __ldc);
public static native void cblas_zherk(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                 @Cast("const CBLAS_TRANSPOSE") int __Trans, int __N, int __K,
                 double __alpha, @Const Pointer __A, int __lda,
                 double __beta, Pointer __C, int __ldc);
public static native void cblas_zher2k(@Cast("const CBLAS_ORDER") int __Order, @Cast("const CBLAS_UPLO") int __Uplo,
                  @Cast("const CBLAS_TRANSPOSE") int __Trans, int __N, int __K,
                  @Const Pointer __alpha, @Const Pointer __A, int __lda, @Const Pointer __B,
                  int __ldb, double __beta, Pointer __C, int __ldc);

/* Apple extensions to the BLAS interface. */

/* These routines perform linear operations (scalar multiplication and addition)
 * on matrices, with optional transposition.  Specifically, the operation is:
 *
 *      C = alpha * A + beta * B
 *
 * where A and B are optionally transposed as indicated by the value of transA
 * and transB.  This is a surprisingly useful operation; although its function
 * is fairly trivial, efficient implementation has enough subtlety to justify
 * a library interface.
 *
 * As an added convenience, this function supports in-place operation for
 * square matrices; in-place operation for non-square matrices in the face of
 * transposition is a subtle problem outside the scope of this interface.
 * In-place operation is only supported if the leading dimensions match as well
 * as the pointers.  If C overlaps A or B but does not have equal leading
 * dimension, or does not exactly match the source that it overlaps, the
 * behavior of this function is undefined.
 *
 * If alpha or beta is zero, then A (or B, respectively) is ignored entirely,
 * meaning that the memory is not accessed and the data does not contribute
 * to the result (meaning you can pass B == NULL if beta is zero).
 *
 * Note that m and n are the number of rows and columns of C, respectively.
 * If either A or B is transposed, then they are interpreted as n x m matrices.
 */

public static native void appleblas_sgeadd(@Cast("const CBLAS_ORDER") int __order,
                             @Cast("const CBLAS_TRANSPOSE") int __transA,
                             @Cast("const CBLAS_TRANSPOSE") int __transB, int __m, int __n,
                             float __alpha, @Const FloatPointer __A, int __lda,
                             float __beta, @Const FloatPointer __B, int __ldb, FloatPointer __C,
                             int __ldc);
public static native void appleblas_sgeadd(@Cast("const CBLAS_ORDER") int __order,
                             @Cast("const CBLAS_TRANSPOSE") int __transA,
                             @Cast("const CBLAS_TRANSPOSE") int __transB, int __m, int __n,
                             float __alpha, @Const FloatBuffer __A, int __lda,
                             float __beta, @Const FloatBuffer __B, int __ldb, FloatBuffer __C,
                             int __ldc);
public static native void appleblas_sgeadd(@Cast("const CBLAS_ORDER") int __order,
                             @Cast("const CBLAS_TRANSPOSE") int __transA,
                             @Cast("const CBLAS_TRANSPOSE") int __transB, int __m, int __n,
                             float __alpha, @Const float[] __A, int __lda,
                             float __beta, @Const float[] __B, int __ldb, float[] __C,
                             int __ldc);

public static native void appleblas_dgeadd(@Cast("const CBLAS_ORDER") int __order,
                             @Cast("const CBLAS_TRANSPOSE") int __transA,
                             @Cast("const CBLAS_TRANSPOSE") int __transB, int __m, int __n,
                             double __alpha, @Const DoublePointer __A, int __lda,
                             double __beta, @Const DoublePointer __B, int __ldb, DoublePointer __C,
                             int __ldc);
public static native void appleblas_dgeadd(@Cast("const CBLAS_ORDER") int __order,
                             @Cast("const CBLAS_TRANSPOSE") int __transA,
                             @Cast("const CBLAS_TRANSPOSE") int __transB, int __m, int __n,
                             double __alpha, @Const DoubleBuffer __A, int __lda,
                             double __beta, @Const DoubleBuffer __B, int __ldb, DoubleBuffer __C,
                             int __ldc);
public static native void appleblas_dgeadd(@Cast("const CBLAS_ORDER") int __order,
                             @Cast("const CBLAS_TRANSPOSE") int __transA,
                             @Cast("const CBLAS_TRANSPOSE") int __transB, int __m, int __n,
                             double __alpha, @Const double[] __A, int __lda,
                             double __beta, @Const double[] __B, int __ldb, double[] __C,
                             int __ldc);

/* The BLAS standard defines a function, cblas_xerbla( ), and suggests that
 * programs provide their own implementation in order to override default
 * error handling.  This scheme is incompatible with the shared library /
 * framework environment of OS X and iOS.
 *
 * Instead, if you wish to change the default BLAS error handling (which is to
 * print an english error message and exit( )), you need to install your own
 * error handler by calling SetBLASParamErrorProc.
 *
 * Your error handler should adhere to the BLASParamErrorProc interface; it
 * need not terminate program execution.  If your error handler returns normally,
 * then the BLAS call will return normally following its execution without
 * performing any further processing.                                         */

public static class BLASParamErrorProc extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    BLASParamErrorProc(Pointer p) { super(p); }
    protected BLASParamErrorProc() { allocate(); }
    private native void allocate();
    public native void call(@Cast("const char*") BytePointer funcName, @Cast("const char*") BytePointer paramName,
                                   @Const IntPointer paramPos,  @Const IntPointer paramValue);
}

public static native void SetBLASParamErrorProc(BLASParamErrorProc __ErrorProc);
  
// #endif /* CBLAS_ENUM_ONLY */
  
// #ifdef __cplusplus
// #endif

// #endif /* CBLAS_H */


}
