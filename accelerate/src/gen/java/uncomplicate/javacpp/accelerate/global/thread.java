// Targeted by JavaCPP version 1.5.12-SNAPSHOT: DO NOT EDIT THIS FILE

package uncomplicate.javacpp.accelerate.global;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

public class thread extends uncomplicate.javacpp.accelerate.presets.thread {
    static { Loader.load(); }

// Parsed from thread_api.h

// #pragma once

// #if __has_include(<os/availability.h>)
// #   include <os/availability.h>
// #else // __has_include(<os/availability.h>)
// #   undef API_AVAILABLE
// #   define API_AVAILABLE(...) /* Nothing */
// #endif // __has_include(<os/availability.h>)

// #ifdef __cplusplus
// #endif

/** enum BLAS_THREADING */
public static final int
    BLAS_THREADING_MULTI_THREADED = 0, // Accelerate decides how many threads to use
    BLAS_THREADING_SINGLE_THREADED = 1,    // Single threaded only

    BLAS_THREADING_MAX_OPTIONS = 2; /* Nothing */

/** \abstract Set the threading model to use for BLAS and LAPACK
 *
 *  \discussion
 *  Set the threading model to use for the subsequent calls into BLAS and LAPACK.
 *  This setting is per thread, saved in a thread local variable.
 *
 *  @param threading (input) The desired threading model.
 *
 *  @return
 *        0:  Success <br>
 *        -1: Option is not supported on this platform
 */
public static native int BLASSetThreading(@Cast("const BLAS_THREADING") int threading);

/** \abstract Query what the currently selected threading model is.
 *
 *  \discussion
 *  This routine will return what the currently selected threading model is.
 *  This setting is per thread, saved in a thread local variable.
 *
 *  @return An enum representing the currently selected threading model.
 */
public static native @Cast("BLAS_THREADING") int BLASGetThreading();

// #ifdef __cplusplus
// #endif


}
